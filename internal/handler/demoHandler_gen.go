// Code generated by iris-enhance. DO NOT EDIT.
package handler

import (
	"context"
	"github.com/celt237/iris-enhance"
	"github.com/celt237/iris-enhance.demo/model"
	iris "github.com/kataras/iris/v12"
)

// declare handler interface
type DemoHTTPHandler interface {
	CreateDemo(ctx context.Context, demo *model.Demo) (int, error)
	GetDemoById(ctx context.Context, id int8) (*model.Demo, error)
	GetDemoById2(ctx context.Context, id *int) (*model.Demo, error)
	Search(ctx context.Context, id *int, name string) ([]*model.Demo, error)
	Search2(ctx context.Context, pms *model.Demo) ([]*model.Demo, error)
}

// RegisterDemoHTTPHandler define http router handle by iris.
// regist route handler
func RegisterDemoHTTPHandler(group iris.Party, api iris_enhance.ApiHandler, srv DemoHTTPHandler) {
	group.Post("/demo/add", _Demo_CreateDemo_HTTP_Handler(api, srv))
	group.Get("/demo/{id}", _Demo_GetDemoById_HTTP_Handler(api, srv))
	group.Get("/demo/getDemo", _Demo_GetDemoById2_HTTP_Handler(api, srv))
	group.Get("/demo/search/{id}", _Demo_Search_HTTP_Handler(api, srv))
	group.Post("/demo/search2", _Demo_Search2_HTTP_Handler(api, srv))
}

// declare handler
// Traverse all previously parsed rpc method information

// @Summary 创建demo
// @Description 创建demo
// @Tags demo
// @Accept application/json
// @Produce application/json
// @Param demo body model.Demo true "demo数据"
// @Success 200 {object} model.ResultGeneric[int]  "请求成功返回的结果"
// @Failure 500 {object} model.ResultGeneric[int] "请求失败返回的结果"
// @Router /demo/add [post]
func _Demo_CreateDemo_HTTP_Handler(api iris_enhance.ApiHandler, srv DemoHTTPHandler) func(ctx iris.Context) {
	return func(ctx iris.Context) {
		wrapperCtx := api.WrapContext(ctx)
		var resp int

		demo, err := iris_enhance.GetParamFromContext[*model.Demo](ctx, "demo", "*model.Demo", "body", true, true)
		if err != nil {
			api.Error(ctx, "application/json", resp, err)
			return
		}

		// 执行方法
		resp, err = srv.CreateDemo(wrapperCtx, demo)
		if err != nil {
			api.Error(ctx, "application/json", resp, err)
			return
		}
		api.Success(ctx, "application/json", resp)
	}
}

// @Summary 查询demo
// @Description 查询demo
// @Tags demo
// @Accept application/json
// @Produce application/json
// @Param id path int true "标识"
// @Success 200 {object} model.ResultGeneric[model.Demo]  "请求成功返回的结果"
// @Failure 500 {object} model.ResultGeneric[model.Demo] "请求失败返回的结果"
// @Router /demo/{id} [get]
func _Demo_GetDemoById_HTTP_Handler(api iris_enhance.ApiHandler, srv DemoHTTPHandler) func(ctx iris.Context) {
	return func(ctx iris.Context) {
		wrapperCtx := api.WrapContext(ctx)
		var resp *model.Demo

		id, err := iris_enhance.GetParamFromContext[int8](ctx, "id", "int8", "path", false, true)
		if err != nil {
			api.Error(ctx, "application/json", resp, err)
			return
		}

		// 执行方法
		resp, err = srv.GetDemoById(wrapperCtx, id)
		if err != nil {
			api.Error(ctx, "application/json", resp, err)
			return
		}
		api.Success(ctx, "application/json", resp)
	}
}

// @Summary 查询demo
// @Description 查询demo
// @Tags demo
// @Accept application/json
// @Produce application/json
// @Param id query int true "标识"
// @Success 200 {object} model.ResultGeneric[model.Demo]  "请求成功返回的结果"
// @Failure 500 {object} model.ResultGeneric[model.Demo] "请求失败返回的结果"
// @Router /demo/getDemo [get]
func _Demo_GetDemoById2_HTTP_Handler(api iris_enhance.ApiHandler, srv DemoHTTPHandler) func(ctx iris.Context) {
	return func(ctx iris.Context) {
		wrapperCtx := api.WrapContext(ctx)
		var resp *model.Demo

		id, err := iris_enhance.GetParamFromContext[*int](ctx, "id", "*int", "query", true, true)
		if err != nil {
			api.Error(ctx, "application/json", resp, err)
			return
		}

		// 执行方法
		resp, err = srv.GetDemoById2(wrapperCtx, id)
		if err != nil {
			api.Error(ctx, "application/json", resp, err)
			return
		}
		api.Success(ctx, "application/json", resp)
	}
}

// @Summary 搜索demo
// @Description 搜索demo
// @Tags demo
// @Accept application/json
// @Produce application/json
// @Param id path int true "标识"
// @Param name query string true "名字"
// @Success 200 {object} model.ResultGeneric[[]model.Demo]  "请求成功返回的结果"
// @Failure 500 {object} model.ResultGeneric[[]model.Demo] "请求失败返回的结果"
// @Router /demo/search/{id} [get]
func _Demo_Search_HTTP_Handler(api iris_enhance.ApiHandler, srv DemoHTTPHandler) func(ctx iris.Context) {
	return func(ctx iris.Context) {
		wrapperCtx := api.WrapContext(ctx)
		var resp []*model.Demo

		id, err := iris_enhance.GetParamFromContext[*int](ctx, "id", "*int", "path", true, true)
		if err != nil {
			api.Error(ctx, "application/json", resp, err)
			return
		}
		name, err := iris_enhance.GetParamFromContext[string](ctx, "name", "string", "query", false, true)
		if err != nil {
			api.Error(ctx, "application/json", resp, err)
			return
		}

		// 执行方法
		resp, err = srv.Search(wrapperCtx, id, name)
		if err != nil {
			api.Error(ctx, "application/json", resp, err)
			return
		}
		api.Success(ctx, "application/json", resp)
	}
}

// @Summary 搜索demo
// @Description 搜索demo
// @Tags demo
// @Accept application/json
// @Produce application/json
// @Param pms body model.Demo true "搜索条件"
// @Success 200 {object} model.ResultGeneric[[]model.Demo]  "请求成功返回的结果"
// @Failure 500 {object} model.ResultGeneric[[]model.Demo] "请求失败返回的结果"
// @Router /demo/search2 [post]
func _Demo_Search2_HTTP_Handler(api iris_enhance.ApiHandler, srv DemoHTTPHandler) func(ctx iris.Context) {
	return func(ctx iris.Context) {
		wrapperCtx := api.WrapContext(ctx)
		var resp []*model.Demo

		pms, err := iris_enhance.GetParamFromContext[*model.Demo](ctx, "pms", "*model.Demo", "body", true, true)
		if err != nil {
			api.Error(ctx, "application/json", resp, err)
			return
		}
		err = api.HandleCustomerAnnotation(ctx, "xPower", "1", "2", "qwe")
		if err != nil {
			api.Error(ctx, "application/json", resp, err)
			return
		}

		// 执行方法
		resp, err = srv.Search2(wrapperCtx, pms)
		if err != nil {
			api.Error(ctx, "application/json", resp, err)
			return
		}
		api.Success(ctx, "application/json", resp)
	}
}
